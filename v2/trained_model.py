# Model EÄŸitimi ve Kaydetme

import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Veriyi yÃ¼kle
try:
    df = pd.read_csv(r"C:\Users\Atay\Desktop\grad project\tÃ¼rkÃ§e kodlar\v2\sentetik_nem_verisi.csv")
    print("Veri baÅŸarÄ±yla yÃ¼klendi.")
except FileNotFoundError:
    print("Veri dosyasÄ± bulunamadÄ±. LÃ¼tfen doÄŸru yolu kontrol edin.")
    exit()

# Beklenen sÃ¼tunlarÄ± kontrol et
expected_columns = [
    'SÄ±caklÄ±k (Â°C)', 'BaÅŸlangÄ±Ã§ Nem (%)', 'Saat', 
    'DÄ±ÅŸ Nem (%)', 'Ses Seviyesi', 'IÅŸÄ±k Seviyesi', 'Hedef Nem (%)'
]

if not all(col in df.columns for col in expected_columns):
    print("ğŸš« Veri kÃ¼mesinde eksik sÃ¼tun(lar) var!")
    print("Beklenen sÃ¼tunlar:", expected_columns)
    print("Mevcut sÃ¼tunlar:", df.columns.tolist())
    exit()

# Ã–zellikleri ve hedef deÄŸiÅŸkeni belirle
X = df[['SÄ±caklÄ±k (Â°C)', 'BaÅŸlangÄ±Ã§ Nem (%)', 'Saat', 'DÄ±ÅŸ Nem (%)', 'Ses Seviyesi', 'IÅŸÄ±k Seviyesi']]
y = df['Hedef Nem (%)']

# EÄŸitim ve test setlerine ayÄ±r
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Modeli oluÅŸtur ve eÄŸit
model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=5, random_state=42)
model.fit(X_train, y_train)

# Modelin performansÄ±nÄ± kontrol et
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("âœ… Model eÄŸitildi!")
print(f"ğŸ“‰ Mean Squared Error (MSE): {mse:.2f}")
print(f"ğŸ“ˆ R^2 Score: {r2:.2f}")

# Modeli kaydet
joblib.dump(model, 'trained_model.pkl')
print("ğŸ“¦ Model 'trained_model.pkl' olarak kaydedildi.")
